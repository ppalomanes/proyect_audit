/**
 * Workflow Etapa 1 - Notificaci√≥n
 * Portal de Auditor√≠as T√©cnicas
 */

class Etapa1Notificacion {
  
  /**
   * Ejecutar l√≥gica de la Etapa 1 - Notificaci√≥n
   */
  static async ejecutar(auditoria, datosEtapa, usuario) {
    console.log(`üîî Ejecutando Etapa 1 - Notificaci√≥n para auditor√≠a ${auditoria.codigo_auditoria}`);
    
    try {
      // 1. Preparar datos de notificaci√≥n
      const datosNotificacion = {
        auditoria_id: auditoria.id,
        codigo_auditoria: auditoria.codigo_auditoria,
        titulo: auditoria.titulo,
        fecha_programada: auditoria.fecha_programada,
        auditor_principal: usuario.nombres + ' ' + usuario.apellidos,
        fecha_limite_respuesta: this.calcularFechaLimiteRespuesta(auditoria.fecha_programada)
      };

      // 2. Registrar notificaci√≥n enviada
      const notificacionEnviada = {
        tipo: 'NOTIFICACION_INICIAL',
        destinatario: 'PROVEEDOR',
        fecha_envio: new Date().toISOString(),
        contenido: 'Notificaci√≥n inicial de auditor√≠a t√©cnica programada',
        metadatos: datosNotificacion
      };

      // 3. Actualizar array de notificaciones enviadas
      const notificacionesActuales = auditoria.notificaciones_enviadas || [];
      notificacionesActuales.push(notificacionEnviada);
      
      auditoria.notificaciones_enviadas = notificacionesActuales;
      await auditoria.save();

      // 4. TODO: Integrar con m√≥dulo de notificaciones
      // await notificationsService.enviarNotificacionProveedor(datosNotificacion);

      console.log('‚úÖ Etapa 1 - Notificaci√≥n completada exitosamente');
      
      return {
        success: true,
        message: 'Notificaci√≥n enviada exitosamente',
        data: {
          notificacion_enviada: notificacionEnviada,
          fecha_limite_respuesta: datosNotificacion.fecha_limite_respuesta
        }
      };

    } catch (error) {
      console.error('‚ùå Error en Etapa 1 - Notificaci√≥n:', error);
      
      return {
        success: false,
        message: 'Error enviando notificaci√≥n',
        error: error.message
      };
    }
  }

  /**
   * Calcular fecha l√≠mite de respuesta (5 d√≠as h√°biles)
   */
  static calcularFechaLimiteRespuesta(fechaProgramada) {
    const fecha = new Date(fechaProgramada);
    let diasHabiles = 0;
    
    while (diasHabiles < 5) {
      fecha.setDate(fecha.getDate() + 1);
      
      // Saltar fines de semana (0 = domingo, 6 = s√°bado)
      if (fecha.getDay() !== 0 && fecha.getDay() !== 6) {
        diasHabiles++;
      }
    }
    
    return fecha.toISOString();
  }

  /**
   * Validar requisitos para avanzar de Etapa 1
   */
  static async validarRequisitos(auditoria) {
    // La etapa 1 siempre puede ejecutarse desde estado PROGRAMADA
    if (auditoria.estado === 'PROGRAMADA') {
      return {
        esValido: true,
        mensaje: 'Auditor√≠a lista para notificaci√≥n'
      };
    }

    return {
      esValido: false,
      mensaje: 'La auditor√≠a debe estar en estado PROGRAMADA para enviar notificaci√≥n'
    };
  }

  /**
   * Obtener plantilla de notificaci√≥n
   */
  static obtenerPlantillaNotificacion(auditoria, auditor) {
    return {
      asunto: `Notificaci√≥n de Auditor√≠a T√©cnica - ${auditoria.codigo_auditoria}`,
      contenido: `
        Estimado Proveedor,
        
        Se ha programado una auditor√≠a t√©cnica con los siguientes detalles:
        
        üìã C√≥digo de Auditor√≠a: ${auditoria.codigo_auditoria}
        üìù T√≠tulo: ${auditoria.titulo}
        üìÖ Fecha Programada: ${new Date(auditoria.fecha_programada).toLocaleDateString('es-CO')}
        üë§ Auditor Principal: ${auditor.nombres} ${auditor.apellidos}
        üìß Contacto Auditor: ${auditor.email}
        
        Pr√≥ximos pasos:
        1. Preparar documentaci√≥n requerida (13 tipos de documentos)
        2. Coordinar acceso al parque inform√°tico
        3. Designar contacto t√©cnico para la auditor√≠a
        
        La siguiente etapa ser√° la carga de documentos que iniciar√° pr√≥ximamente.
        
        Atentamente,
        Portal de Auditor√≠as T√©cnicas
      `
    };
  }
}

module.exports = Etapa1Notificacion;
