/**
 * Workflow Etapa 2 - Carga de Documentos
 * Portal de Auditor√≠as T√©cnicas
 */

class Etapa2CargaDocumentos {
  
  /**
   * Tipos de documentos requeridos en la auditor√≠a
   */
  static DOCUMENTOS_REQUERIDOS = [
    { tipo: 'PLIEGO_TECNICO', nombre: 'Pliego T√©cnico Firmado', obligatorio: true },
    { tipo: 'CERTIFICADO_EMPRESA', nombre: 'Certificado de Constituci√≥n Empresa', obligatorio: true },
    { tipo: 'RUT_EMPRESA', nombre: 'RUT Actualizado', obligatorio: true },
    { tipo: 'ESTADOS_FINANCIEROS', nombre: 'Estados Financieros √öltimos 2 A√±os', obligatorio: true },
    { tipo: 'CERTIFICACIONES_ISO', nombre: 'Certificaciones ISO (9001, 27001)', obligatorio: false },
    { tipo: 'ORGANIGRAMA', nombre: 'Organigrama de la Empresa', obligatorio: true },
    { tipo: 'INVENTARIO_HARDWARE', nombre: 'Inventario Completo de Hardware', obligatorio: true },
    { tipo: 'INVENTARIO_SOFTWARE', nombre: 'Inventario de Software y Licencias', obligatorio: true },
    { tipo: 'DIAGRAMA_RED', nombre: 'Diagrama de Arquitectura de Red', obligatorio: true },
    { tipo: 'POLITICAS_SEGURIDAD', nombre: 'Pol√≠ticas de Seguridad Inform√°tica', obligatorio: true },
    { tipo: 'PLAN_CONTINGENCIA', nombre: 'Plan de Contingencia y Backup', obligatorio: true },
    { tipo: 'CONTRATOS_PROVEEDORES', nombre: 'Contratos con Proveedores TI', obligatorio: false },
    { tipo: 'EVIDENCIAS_MONITOREO', nombre: 'Evidencias de Monitoreo y Logs', obligatorio: true }
  ];

  /**
   * Ejecutar l√≥gica de la Etapa 2 - Carga de Documentos
   */
  static async ejecutar(auditoria, datosEtapa, usuario) {
    console.log(`üìÅ Ejecutando Etapa 2 - Carga de Documentos para auditor√≠a ${auditoria.codigo_auditoria}`);
    
    try {
      // 1. Configurar fecha l√≠mite de carga
      const fechaLimiteCarga = datosEtapa.fecha_limite_carga || 
        this.calcularFechaLimiteCarga(auditoria.fecha_programada);

      // 2. Activar carga de documentos para proveedor
      const configuracionCarga = {
        fecha_limite: fechaLimiteCarga,
        documentos_requeridos: this.DOCUMENTOS_REQUERIDOS,
        instrucciones_especiales: datosEtapa.instrucciones || this.obtenerInstruccionesDefecto(),
        formatos_permitidos: ['PDF', 'DOC', 'DOCX', 'XLS', 'XLSX', 'JPG', 'PNG'],
        tama√±o_maximo_mb: 50
      };

      // 3. Actualizar configuraci√≥n de la auditor√≠a
      const configuracionEtapas = auditoria.configuracion_etapas || {};
      configuracionEtapas.etapa_2 = {
        ...configuracionEtapas.etapa_2,
        fecha_limite_carga: fechaLimiteCarga,
        carga_habilitada: true,
        fecha_habilitacion: new Date().toISOString(),
        configuracion_carga: configuracionCarga
      };

      auditoria.configuracion_etapas = configuracionEtapas;
      await auditoria.save();

      // 4. Registrar evento de habilitaci√≥n
      const eventoHabilitacion = {
        tipo: 'CARGA_DOCUMENTOS_HABILITADA',
        fecha: new Date().toISOString(),
        usuario_id: usuario.id,
        configuracion: configuracionCarga
      };

      const notificacionesActuales = auditoria.notificaciones_enviadas || [];
      notificacionesActuales.push(eventoHabilitacion);
      auditoria.notificaciones_enviadas = notificacionesActuales;
      await auditoria.save();

      // 5. TODO: Notificar al proveedor sobre habilitaci√≥n de carga
      // await notificationsService.notificarHabilitacionCarga(auditoria, configuracionCarga);

      console.log('‚úÖ Etapa 2 - Carga de Documentos habilitada exitosamente');
      
      return {
        success: true,
        message: 'Carga de documentos habilitada exitosamente',
        data: {
          fecha_limite_carga: fechaLimiteCarga,
          documentos_requeridos: this.DOCUMENTOS_REQUERIDOS.length,
          configuracion: configuracionCarga
        }
      };

    } catch (error) {
      console.error('‚ùå Error en Etapa 2 - Carga de Documentos:', error);
      
      return {
        success: false,
        message: 'Error habilitando carga de documentos',
        error: error.message
      };
    }
  }

  /**
   * Calcular fecha l√≠mite de carga (15 d√≠as calendario)
   */
  static calcularFechaLimiteCarga(fechaProgramada) {
    const fecha = new Date(fechaProgramada);
    fecha.setDate(fecha.getDate() + 15);
    return fecha.toISOString();
  }

  /**
   * Validar requisitos para avanzar de Etapa 2
   */
  static async validarRequisitos(auditoria) {
    // Verificar que est√° en la etapa correcta
    if (auditoria.etapa_actual !== 2) {
      return {
        esValido: false,
        mensaje: 'La auditor√≠a debe estar en etapa 2 para validar documentos'
      };
    }

    // TODO: Verificar que hay documentos cargados
    // const { Documento } = await require('../../../models').getModels();
    // const documentosCargados = await Documento.count({
    //   where: { auditoria_id: auditoria.id }
    // });

    // Simulaci√≥n temporal
    const documentosCargados = 0;

    if (documentosCargados === 0) {
      return {
        esValido: false,
        mensaje: 'Debe haber al menos un documento cargado para avanzar',
        detalles: {
          documentos_requeridos: this.DOCUMENTOS_REQUERIDOS.length,
          documentos_cargados: documentosCargados
        }
      };
    }

    return {
      esValido: true,
      mensaje: 'Documentos disponibles para validaci√≥n'
    };
  }

  /**
   * Obtener instrucciones por defecto para carga
   */
  static obtenerInstruccionesDefecto() {
    return [
      'Todos los documentos deben estar en formato PDF cuando sea posible',
      'Los archivos de Excel deben contener el inventario completo actualizado',
      'Las im√°genes deben tener resoluci√≥n m√≠nima de 300 DPI',
      'Los documentos deben estar firmados digitalmente o con sello h√∫medo',
      'Incluir fecha de generaci√≥n en cada documento',
      'Los inventarios deben incluir n√∫meros de serie y modelos espec√≠ficos',
      'Las pol√≠ticas de seguridad deben estar vigentes (m√°ximo 1 a√±o)',
      'Los diagramas de red deben mostrar la topolog√≠a actual completa'
    ];
  }

  /**
   * Verificar completitud de documentos cargados
   */
  static async verificarCompletitud(auditoriaId) {
    // TODO: Implementar verificaci√≥n real con modelo Documento
    const documentosCargados = [];
    
    const documentosObligatorios = this.DOCUMENTOS_REQUERIDOS
      .filter(doc => doc.obligatorio)
      .map(doc => doc.tipo);

    const documentosFaltantes = documentosObligatorios.filter(tipo => 
      !documentosCargados.some(doc => doc.tipo_documento === tipo)
    );

    const porcentajeCompletitud = ((documentosObligatorios.length - documentosFaltantes.length) / 
      documentosObligatorios.length) * 100;

    return {
      documentos_obligatorios: documentosObligatorios.length,
      documentos_cargados: documentosCargados.length,
      documentos_faltantes: documentosFaltantes,
      porcentaje_completitud: Math.round(porcentajeCompletitud),
      esta_completo: documentosFaltantes.length === 0
    };
  }

  /**
   * Obtener plantilla de notificaci√≥n para habilitaci√≥n de carga
   */
  static obtenerPlantillaHabilitacion(auditoria, configuracion) {
    return {
      asunto: `Habilitaci√≥n Carga de Documentos - ${auditoria.codigo_auditoria}`,
      contenido: `
        Estimado Proveedor,
        
        Se ha habilitado la carga de documentos para la auditor√≠a t√©cnica:
        
        üìã C√≥digo de Auditor√≠a: ${auditoria.codigo_auditoria}
        üìÖ Fecha L√≠mite de Carga: ${new Date(configuracion.fecha_limite).toLocaleDateString('es-CO')}
        üìÑ Documentos Requeridos: ${configuracion.documentos_requeridos.length}
        
        DOCUMENTOS OBLIGATORIOS:
        ${configuracion.documentos_requeridos
          .filter(doc => doc.obligatorio)
          .map(doc => `‚Ä¢ ${doc.nombre}`)
          .join('\n        ')}
        
        DOCUMENTOS OPCIONALES:
        ${configuracion.documentos_requeridos
          .filter(doc => !doc.obligatorio)
          .map(doc => `‚Ä¢ ${doc.nombre}`)
          .join('\n        ')}
        
        REQUISITOS T√âCNICOS:
        ‚Ä¢ Formatos permitidos: ${configuracion.formatos_permitidos.join(', ')}
        ‚Ä¢ Tama√±o m√°ximo por archivo: ${configuracion.tama√±o_maximo_mb} MB
        ‚Ä¢ Documentos firmados digitalmente o con sello h√∫medo
        
        Para cargar los documentos, ingrese al portal con sus credenciales y dir√≠gase a la secci√≥n de auditor√≠as.
        
        Atentamente,
        Portal de Auditor√≠as T√©cnicas
      `
    };
  }

  /**
   * Generar reporte de estado de carga
   */
  static async generarReporteEstado(auditoriaId) {
    const completitud = await this.verificarCompletitud(auditoriaId);
    
    return {
      resumen: {
        estado: completitud.esta_completo ? 'COMPLETO' : 'PENDIENTE',
        porcentaje: completitud.porcentaje_completitud,
        documentos_cargados: completitud.documentos_cargados,
        documentos_faltantes: completitud.documentos_faltantes.length
      },
      detalles: {
        documentos_obligatorios_faltantes: completitud.documentos_faltantes,
        recomendaciones: this.generarRecomendaciones(completitud)
      },
      proximos_pasos: completitud.esta_completo 
        ? ['Documentos completos', 'Listo para validaci√≥n']
        : ['Cargar documentos faltantes', 'Verificar formatos', 'Completar informaci√≥n']
    };
  }

  /**
   * Generar recomendaciones basadas en completitud
   */
  static generarRecomendaciones(completitud) {
    const recomendaciones = [];
    
    if (completitud.porcentaje_completitud < 50) {
      recomendaciones.push('Priorizar carga de documentos obligatorios');
      recomendaciones.push('Revisar lista completa de documentos requeridos');
    }
    
    if (completitud.documentos_faltantes.includes('INVENTARIO_HARDWARE')) {
      recomendaciones.push('El inventario de hardware es cr√≠tico para la auditor√≠a');
    }
    
    if (completitud.documentos_faltantes.includes('INVENTARIO_SOFTWARE')) {
      recomendaciones.push('El inventario de software debe incluir todas las licencias');
    }
    
    if (completitud.porcentaje_completitud >= 80) {
      recomendaciones.push('Excelente progreso, pocos documentos pendientes');
    }
    
    return recomendaciones;
  }
}

module.exports = Etapa2CargaDocumentos;
