/**
 * Utilidad para limpiar storage corrupto
 * Portal de Auditor√≠as T√©cnicas
 */

// Funci√≥n para limpiar storage corrupto autom√°ticamente
export const cleanCorruptedStorage = () => {
  console.log('üßπ Iniciando limpieza de storage corrupto...');
  
  let corruptedItems = 0;
  
  // Limpiar localStorage - SOLO valores espec√≠ficamente corruptos
  ['token', 'refresh_token', 'user', 'auth-storage'].forEach(key => {
    const value = localStorage.getItem(key);
    // üõ°Ô∏è Solo considerar corrupto si es string "undefined" o cadena vac√≠a
    if (value === 'undefined' || value === '') {
      console.log(`‚ùå Removiendo localStorage.${key}: ${value}`);
      localStorage.removeItem(key);
      corruptedItems++;
    }
  });
  
  // Limpiar sessionStorage - SOLO valores espec√≠ficamente corruptos
  ['token', 'refresh_token', 'user'].forEach(key => {
    const value = sessionStorage.getItem(key);
    // üõ°Ô∏è Solo considerar corrupto si es string "undefined" o cadena vac√≠a
    if (value === 'undefined' || value === '') {
      console.log(`‚ùå Removiendo sessionStorage.${key}: ${value}`);
      sessionStorage.removeItem(key);
      corruptedItems++;
    }
  });
  
  // Verificar JSON v√°lido en localStorage existente
  ['user', 'auth-storage'].forEach(key => {
    const value = localStorage.getItem(key);
    if (value && value !== 'undefined' && value !== 'null') {
      try {
        JSON.parse(value);
        console.log(`‚úÖ ${key}: JSON v√°lido`);
      } catch (error) {
        console.log(`‚ùå JSON corrupto en ${key}, removiendo...`);
        localStorage.removeItem(key);
        corruptedItems++;
      }
    }
  });
  
  if (corruptedItems > 0) {
    console.log(`üßπ ${corruptedItems} elementos corruptos limpiados`);
    return true; // Indica que se limpiaron datos
  } else {
    console.log('‚úÖ Storage limpio, no se requiere acci√≥n');
    return false;
  }
};

// Funci√≥n para ejecutar limpieza en desarrollo (MEJORADA - Anti-loop)
export const devCleanStorage = () => {
  if (import.meta.env.DEV) {
    // üõ°Ô∏è Verificar si ya se ejecut√≥ la limpieza en esta sesi√≥n
    const cleanupFlag = sessionStorage.getItem('dev_cleanup_executed');
    if (cleanupFlag === 'true') {
      console.log('‚ÑπÔ∏è Limpieza ya ejecutada en esta sesi√≥n, saltando...');
      return;
    }
    
    console.log('üîß Modo desarrollo: Ejecutando limpieza autom√°tica...');
    const wasCleaned = cleanCorruptedStorage();
    
    // Marcar que ya se ejecut√≥ la limpieza
    sessionStorage.setItem('dev_cleanup_executed', 'true');
    
    if (wasCleaned) {
      console.log('üîÑ Datos limpiados, recargando p√°gina...');
      setTimeout(() => window.location.reload(), 1000);
    } else {
      console.log('‚úÖ No se requiere limpieza, continuando...');
    }
  }
};

// Funci√≥n para diagnosticar storage
export const diagnoseStorage = () => {
  console.log('üîç DIAGN√ìSTICO DE STORAGE');
  console.log('========================');
  
  console.log('\nüìÅ localStorage:');
  ['token', 'refresh_token', 'user', 'auth-storage'].forEach(key => {
    const value = localStorage.getItem(key);
    console.log(`  ${key}:`, {
      exists: !!value,
      type: typeof value,
      value: value?.substring(0, 50) + (value?.length > 50 ? '...' : ''),
      isValid: value && value !== 'undefined' && value !== 'null'
    });
  });
  
  console.log('\nüìÇ sessionStorage:');
  ['token', 'refresh_token', 'user'].forEach(key => {
    const value = sessionStorage.getItem(key);
    console.log(`  ${key}:`, {
      exists: !!value,
      type: typeof value,
      value: value?.substring(0, 50) + (value?.length > 50 ? '...' : ''),
      isValid: value && value !== 'undefined' && value !== 'null'
    });
  });
  
  console.log('\nüß™ Validaci√≥n JSON:');
  ['user', 'auth-storage'].forEach(key => {
    const value = localStorage.getItem(key);
    if (value && value !== 'undefined') {
      try {
        const parsed = JSON.parse(value);
        console.log(`  ‚úÖ ${key}: JSON v√°lido`, typeof parsed);
      } catch (error) {
        console.log(`  ‚ùå ${key}: JSON inv√°lido -`, error.message);
      }
    }
  });
};

// Script para ejecutar en DevTools Console
export const generateCleanupScript = () => {
  return `
// === SCRIPT DE LIMPIEZA AUTOM√ÅTICA STORAGE ===
console.log('üßπ Limpiando storage corrupto...');

// Limpiar localStorage
['token', 'refresh_token', 'user', 'auth-storage'].forEach(key => {
  const value = localStorage.getItem(key);
  if (value === 'undefined' || value === null || value === '') {
    console.log(\`‚ùå Removiendo \${key}: \${value}\`);
    localStorage.removeItem(key);
  } else {
    console.log(\`‚úÖ \${key}: OK\`);
  }
});

// Limpiar sessionStorage  
['token', 'refresh_token', 'user'].forEach(key => {
  const value = sessionStorage.getItem(key);
  if (value === 'undefined' || value === null || value === '') {
    console.log(\`‚ùå Removiendo \${key}: \${value}\`);
    sessionStorage.removeItem(key);
  } else {
    console.log(\`‚úÖ \${key}: OK\`);
  }
});

// Verificar JSON v√°lido
['user', 'auth-storage'].forEach(key => {
  const value = localStorage.getItem(key);
  if (value && value !== 'undefined') {
    try {
      JSON.parse(value);
      console.log(\`‚úÖ \${key}: JSON v√°lido\`);
    } catch (error) {
      console.log(\`‚ùå JSON corrupto en \${key}, removiendo...\`);
      localStorage.removeItem(key);
    }
  }
});

console.log('‚úÖ Storage limpiado. Recargando p√°gina...');
setTimeout(() => location.reload(), 1000);
// === FIN SCRIPT ===
  `.trim();
};

// Funci√≥n para uso inmediato en console (MEJORADA)
if (typeof window !== 'undefined') {
  window.cleanStorage = cleanCorruptedStorage;
  window.diagnoseStorage = diagnoseStorage;
  window.devCleanStorage = devCleanStorage;
  
  // Agregar utilidad para debug de AuthStore
  window.debugAuth = () => {
    if (typeof useAuthStore !== 'undefined') {
      const state = useAuthStore.getState();
      console.log('üîç AuthStore Debug:', {
        isAuthenticated: state.isAuthenticated,
        hasUser: !!state.user,
        user: state.user,
        hasToken: !!state.token,
        error: state.error,
        loading: state.loading
      });
      return state;
    } else {
      console.log('AuthStore no disponible');
    }
  };
  
  console.log('‚úÖ Storage utilities loaded:', {
    cleanStorage: 'Limpiar storage corrupto',
    diagnoseStorage: 'Diagnosticar storage actual', 
    devCleanStorage: 'Limpieza modo desarrollo',
    debugAuth: 'Debug estado AuthStore'
  });
}

// Exportar para uso en componentes
export default {
  cleanCorruptedStorage,
  devCleanStorage, 
  diagnoseStorage,
  generateCleanupScript
};
